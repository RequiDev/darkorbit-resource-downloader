name: .NET CI + Release

on:
  push:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rid: [ linux-x64, win-x64, osx-x64, osx-arm64 ]

    env:
      RID: ${{ matrix.rid }}
      # Path to your main project (edit if different)
      PROJECT: darkorbit_resource_downloader/darkorbit_resource_downloader.csproj
      SOLUTION: darkorbit_resource_downloader.sln

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # Version first so we can embed it
      - name: Compute next version (patch bump)
        id: ver
        run: |
          git fetch --tags --force
          latest=$(git tag -l 'v*' --sort=-v:refname | head -n1)
          if [ -z "$latest" ]; then base="0.1.0"; else base=${latest#v}; fi
          IFS='.' read -r MA MI PA <<<"$base"
          PA=$((PA+1))
          echo "version=$MA.$MI.$PA" >> $GITHUB_OUTPUT

      - name: Restore (solution)
        run: dotnet restore "$SOLUTION"

      - name: Build (solution, no RID here)
        run: dotnet build "$SOLUTION" --configuration Release --no-restore

      - name: Test
        run: dotnet test "$SOLUTION" --configuration Release --no-build --verbosity normal

      # RID-specific restore for the project you'll publish
      - name: Restore (project, RID-specific)
        run: dotnet restore "$PROJECT" -r $RID

      # âœ… Build the project for this RID so publish has outputs to copy
      - name: Build (project, RID-specific)
        run: dotnet build "$PROJECT" -c Release -r $RID -p:Version=${{ steps.ver.outputs.version }} --no-restore

      - name: Publish (${{ matrix.rid }})
        run: |
          dotnet publish "$PROJECT" \
            -c Release \
            -r $RID \
            -p:Version=${{ steps.ver.outputs.version }} \
            -o publish/$RID \
            --no-build \
            -p:PublishSingleFile=true \
            --self-contained false

      - name: Archive artifact (${{ matrix.rid }})
        run: |
          cd publish/$RID
          zip -r "../../app-${RID}.zip" .
        shell: bash

      - name: Upload artifact (${{ matrix.rid }})
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.rid }}
          path: app-${{ matrix.rid }}.zip

  tag_and_release:
    name: Tag and release
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Recompute next version (same logic)
        id: ver
        run: |
          git fetch --tags --force
          latest=$(git tag -l 'v*' --sort=-v:refname | head -n1)
          if [ -z "$latest" ]; then base="0.1.0"; else base=${latest#v}; fi
          IFS='.' read -r MA MI PA <<<"$base"
          PA=$((PA+1))
          echo "version=$MA.$MI.$PA" >> $GITHUB_OUTPUT

      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.ver.outputs.version }}" -m "Release v${{ steps.ver.outputs.version }}"
          git push origin "v${{ steps.ver.outputs.version }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          name: v${{ steps.ver.outputs.version }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
