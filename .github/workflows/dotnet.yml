name: .NET CI + Release

on:
  push:
    branches: [ "master" ]

permissions:
  contents: write   # needed to push tags & create releases

jobs:
  build:
    name: Build (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rid: [ linux-x64, win-x64, osx-x64, osx-arm64 ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Publish for each runtime (framework-dependent by default)
      # If you want self-contained binaries, add: --self-contained true
      - name: Publish (${{ matrix.rid }})
        run: dotnet publish --configuration Release -r ${{ matrix.rid }} -o publish/${{ matrix.rid }} --no-build

      - name: Archive artifact (${{ matrix.rid }})
        run: |
          cd publish/${{ matrix.rid }}
          zip -r ../../app-${{ matrix.rid }}.zip .
        shell: bash

      - name: Upload artifact (${{ matrix.rid }})
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.rid }}
          path: app-${{ matrix.rid }}.zip

  tag_and_release:
    name: Bump version, tag, and release
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need tags/history

      - name: Compute next version (patch bump)
        id: ver
        run: |
          git fetch --tags
          latest=$(git tag -l 'v*' --sort=-v:refname | head -n1)
          if [ -z "$latest" ]; then
            new="0.1.0"
          else
            base=${latest#v}
            IFS='.' read -r MA MI PA <<<"$base"
            PA=$((PA+1))
            new="$MA.$MI.$PA"
          fi
          echo "version=$new" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.ver.outputs.version }}" -m "Release v${{ steps.ver.outputs.version }}"
          git push origin "v${{ steps.ver.outputs.version }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          name: v${{ steps.ver.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
